{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_10", "type": "c"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_11", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_12", "type": "c"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_13", "type": "c"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_14", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_15", "type": "c"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_6", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_7", "type": "c"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_8", "type": "c"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_9", "type": "c"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_10", "type": "s"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_11", "type": "s"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_12", "type": "s"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_13", "type": "s"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_14", "type": "s"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_4", "type": "s"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_5", "type": "s"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_6", "type": "s"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_7", "type": "s"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_8", "type": "s"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_9", "type": "s"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "toaster_0", "type": "toaster"}, {"name": "r_9", "type": "r"}]}, {"name": "base", "arguments": [{"name": "f_0", "type": "f"}, {"name": "ingredient_1", "type": "ingredient"}]}, {"name": "base", "arguments": [{"name": "f_1", "type": "f"}, {"name": "ingredient_0", "type": "ingredient"}]}, {"name": "cookable", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "cooked", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "cooked", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "cooking_location", "arguments": [{"name": "r_0", "type": "r"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "cuttable", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "east_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "meal_0", "type": "meal"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_2", "type": "f"}, {"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "ingredient_0", "type": "ingredient"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "in", "arguments": [{"name": "ingredient_1", "type": "ingredient"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "inedible", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "ingredient_1", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "ingredient_2", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_9", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_4", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_4", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_8", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_8", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_9", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "needs_cooking", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "north_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "on", "arguments": [{"name": "f_0", "type": "f"}, {"name": "s_3", "type": "s"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_10", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_11", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_12", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_13", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_14", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_15", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_6", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_7", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_8", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_9", "type": "c"}]}, {"name": "open", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "open", "arguments": [{"name": "d_1", "type": "d"}]}, {"name": "open", "arguments": [{"name": "d_2", "type": "d"}]}, {"name": "out", "arguments": [{"name": "meal_0", "type": "meal"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "raw", "arguments": [{"name": "ingredient_0", "type": "ingredient"}]}, {"name": "raw", "arguments": [{"name": "ingredient_1", "type": "ingredient"}]}, {"name": "south_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "uncut", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "ingredient_0", "type": "ingredient"}]}, {"name": "uncut", "arguments": [{"name": "ingredient_1", "type": "ingredient"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_6", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": ["", "hardware", "green veg basket", "shopping list", "red fruit basket", "hygiene", "stationery", "ingredients shelf", "ingredients", "restaurant table", "clothing showcase", "donation box", "items", "pork bacon", "fruits", null, "sliding glass door", "yellow basket", "meats fridge", "clothing", "fruits fridge", "restaurant chair", "pork chop", "showcase", "restaurant", "sofa", "hardware shelf", "toilet", "meats", "meats showcase", "screen door", "stationery shelf", "BBQ", "tips box", "hygiene showcase", "checkout", "sliding patio door", "veg basket", "salt", "shelf", "vegetables", "basket", "orange basket", "counter", "veg fridge", "fruit basket", "ingreditents showcase", "red veg basket", "hygiene shelf", "green fruit basket", "ingredients fridge", "fridge"], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}, {"desc": "", "reward": 1, "commands": ["go north", "go north", "examine shopping list", "take pork bacon from fridge"], "win_events": [{"commands": ["go north", "go north", "examine shopping list", "take pork bacon from fridge"], "actions": [{"name": "go/north", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}], "postconditions": [{"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}], "command_template": "go north", "reverse_name": "go/south", "reverse_command_template": "go south"}, {"name": "go/north", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}], "postconditions": [{"name": "north_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}], "command_template": "go north", "reverse_name": "go/south", "reverse_command_template": "go south"}, {"name": "examine/s", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}], "command_template": "examine {o_0}", "reverse_name": null, "reverse_command_template": null}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "I", "type": "I"}]}], "command_template": "take {f_1} from {c_1}", "reverse_name": "insert", "reverse_command_template": "insert {f_1} into {c_1}"}], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": []}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "roasted", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "roasted", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "fried", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "fried", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "grilled", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "grilled", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "sliced", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "sliced", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "diced", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "diced", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "chopped", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "chopped", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}, {"desc": "", "reward": 1, "commands": ["go north", "go north", "examine shopping list", "take pork bacon from fridge", "go south", "go south", "take salt from ingredients shelf"], "win_events": [{"commands": ["go north", "go north", "examine shopping list", "take pork bacon from fridge", "go south", "go south", "take salt from ingredients shelf"], "actions": [{"name": "go/north", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}], "postconditions": [{"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}], "command_template": "go north", "reverse_name": "go/south", "reverse_command_template": "go south"}, {"name": "go/north", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}], "postconditions": [{"name": "north_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}], "command_template": "go north", "reverse_name": "go/south", "reverse_command_template": "go south"}, {"name": "examine/s", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}], "command_template": "examine {o_0}", "reverse_name": null, "reverse_command_template": null}, {"name": "take/c", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "c_1", "type": "c"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "I", "type": "I"}]}], "command_template": "take {f_1} from {c_1}", "reverse_name": "insert", "reverse_command_template": "insert {f_1} into {c_1}"}, {"name": "go/south", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}], "postconditions": [{"name": "north_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}], "command_template": "go south", "reverse_name": "go/north", "reverse_command_template": "go north"}, {"name": "go/south", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_4", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}], "postconditions": [{"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}], "command_template": "go south", "reverse_name": "go/north", "reverse_command_template": "go north"}, {"name": "take/s", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_5", "type": "r"}]}, {"name": "on", "arguments": [{"name": "f_0", "type": "f"}, {"name": "s_3", "type": "s"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_5", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}], "command_template": "take {f_0} from {s_3}", "reverse_name": "put", "reverse_command_template": "put {f_0} on {s_3}"}], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": []}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "roasted", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "roasted", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "fried", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "fried", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "grilled", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "grilled", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "sliced", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "sliced", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "diced", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "diced", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "chopped", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "chopped", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}]}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "checkout", "noun": null, "adj": null, "desc": "Guess what, you are in a place we're calling a checkout. The room is well lit.\n\n You can see a basket.[if c_0 is open and there is something in the c_0] The basket contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] What a letdown! The basket is empty![end if] You can make out [if c_1 is locked]a locked[else if c_1 is open]an opened[otherwise]a closed[end if] conventional looking fridge close by.[if c_1 is open and there is something in the c_1] The fridge contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] What a letdown! The fridge is empty![end if] You make out a donation box.[if c_5 is open and there is something in the c_5] The donation box contains [a list of things in the c_5].[end if][if c_5 is open and the c_5 contains nothing] The donation box is empty! What a waste of a day![end if] You can see a counter. The counter is high-tech.[if there is something on the s_0] On the counter you see [a list of things on the s_0], so there's that.[end if][if there is nothing on the s_0] But the thing hasn't got anything on it.[end if] You see a shelf. The shelf is wooden.[if there is something on the s_1] On the shelf you see [a list of things on the s_1].[end if][if there is nothing on the s_1] But the thing hasn't got anything on it.[end if] You can see a showcase. [if there is something on the s_2]You see [a list of things on the s_2] on the showcase, so there's that.[end if][if there is nothing on the s_2]Looks like someone's already been here and taken everything off it, though.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is not blocked by one. There is an exit to the south. Don't worry, there is no door. There is an exit to the west. Don't worry, there is no door.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "vegetables", "noun": null, "adj": null, "desc": "You find yourself in a vegetables. An ordinary one. I guess you better just go and list everything you see here.\n\n You make out a veg fridge.[if c_11 is open and there is something in the c_11] The veg fridge contains [a list of things in the c_11].[end if][if c_11 is open and the c_11 contains nothing] What a letdown! The veg fridge is empty![end if] You can see [if c_2 is locked]a locked[else if c_2 is open]an opened[otherwise]a closed[end if] red veg basket.[if c_2 is open and there is something in the c_2] The red veg basket contains [a list of things in the c_2]![end if][if c_2 is open and the c_2 contains nothing] The red veg basket is empty, what a horrible day![end if] You can see [if c_3 is locked]a locked[else if c_3 is open]an opened[otherwise]a closed[end if] green veg basket.[if c_3 is open and there is something in the c_3] The green veg basket contains [a list of things in the c_3].[end if][if c_3 is open and the c_3 contains nothing] The green veg basket is empty! What a waste of a day![end if] You can make out [if c_6 is locked]a locked[else if c_6 is open]an opened[otherwise]a closed[end if] orange basket.[if c_6 is open and there is something in the c_6] The orange basket contains [a list of things in the c_6]. The light flickers for a second, but nothing else happens.[end if][if c_6 is open and the c_6 contains nothing] What a letdown! The orange basket is empty![end if] Hey, want to see a veg basket? Look over there, a veg basket. Wow, isn't TextWorld just the best?[if c_9 is open and there is something in the c_9] The veg basket contains [a list of things in the c_9]. Huh, weird.[end if][if c_9 is open and the c_9 contains nothing] What a letdown! The veg basket is empty![end if]\n\nThere is an exit to the east. Don't worry, there is no door.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "fruits", "noun": null, "adj": null, "desc": "You arrive in a fruits. A typical kind of place. Okay, just remember what you're here to do, and everything will go great.\n\n As if things weren't amazing enough already, you can even see a red fruit basket. You idly wonder how they came up with the name TextWorld for this place. It's pretty fitting.[if c_10 is open and there is something in the c_10] The red fruit basket contains [a list of things in the c_10]. You idly wonder how they came up with the name TextWorld for this place. It's pretty fitting.[end if][if c_10 is open and the c_10 contains nothing] The red fruit basket is empty, what a horrible day![end if] You can see a fruit basket.[if c_12 is open and there is something in the c_12] The fruit basket contains [a list of things in the c_12].[end if][if c_12 is open and the c_12 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You see a green fruit basket.[if c_13 is open and there is something in the c_13] The green fruit basket contains [a list of things in the c_13].[end if][if c_13 is open and the c_13 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You lean against the wall, inadvertently pressing a secret button. The wall opens up to reveal a yellow basket. You check the price tag that hangs off the yellow basket. 75 bucks? What a deal! You'll have to ask where they got this![if c_4 is open and there is something in the c_4] The yellow basket contains [a list of things in the c_4].[end if][if c_4 is open and the c_4 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You can see a fruits fridge.[if c_8 is open and there is something in the c_8] The fruits fridge contains [a list of things in the c_8].[end if][if c_8 is open and the c_8 contains nothing] The fruits fridge is empty, what a horrible day![end if]\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] screen door leading south. You need an exit without a door? You should try going east. You need an exit without a door? You should try going west.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "clothing", "noun": null, "adj": null, "desc": "You've just sauntered into a clothing. You begin to take stock of what's here.\n\n If you haven't noticed it already, there seems to be something there by the wall, it's a clothing showcase. You wonder idly who left that here. [if there is something on the s_9]You see [a list of things on the s_9] on the clothing showcase.[end if][if there is nothing on the s_9]The clothing showcase appears to be empty.[end if]\n\nThere is an exit to the west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "meats", "noun": null, "adj": null, "desc": "You're now in a meats.\n\n You see [if c_14 is locked]a locked[else if c_14 is open]an opened[otherwise]a closed[end if] meats fridge close by.[if c_14 is open and there is something in the c_14] The meats fridge contains [a list of things in the c_14].[end if][if c_14 is open and the c_14 contains nothing] The meats fridge is empty! What a waste of a day![end if] Hey, want to see a meats showcase? Look over there, a meats showcase. The meats showcase is metallic.[if there is something on the s_6] On the meats showcase you make out [a list of things on the s_6].[end if][if there is nothing on the s_6] Looks like someone's already been here and taken everything off it, though.[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] sliding patio door leading west. There is an exit to the north. Don't worry, there is no door. You need an exit without a door? You should try going south.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "stationery", "noun": null, "adj": null, "desc": "You find yourself in a stationery. A typical kind of place. You decide to just list off a complete list of everything you see in the room, because hey, why not?\n\n You see a stationery shelf. [if there is something on the s_10]On the stationery shelf you make out [a list of things on the s_10].[end if][if there is nothing on the s_10]However, the stationery shelf, like an empty stationery shelf, has nothing on it.[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] sliding patio door leading east. There is [if d_1 is open]an open[otherwise]a closed[end if] sliding glass door leading west. You don't like doors? Why not try going south, that entranceway is not blocked by one.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "hygiene", "noun": null, "adj": null, "desc": "You're now in the hygiene. Okay, just remember what you're here to do, and everything will go great.\n\n You see a hygiene showcase. You shudder, but continue examining the hygiene showcase. The hygiene showcase is metallic.[if there is something on the s_12] On the hygiene showcase you see [a list of things on the s_12].[end if][if there is nothing on the s_12] But there isn't a thing on it. Aw, here you were, all excited for there to be things on it![end if] You see a hygiene shelf. [if there is something on the s_13]You see [a list of things on the s_13] on the hygiene shelf.[end if][if there is nothing on the s_13]But the thing is empty, unfortunately.[end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] sliding glass door leading east.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "ingredients", "noun": null, "adj": null, "desc": "Wow! You're in an ingredients.\n\n You can make out [if c_15 is locked]a locked[else if c_15 is open]an opened[otherwise]a closed[end if] ingredients fridge.[if c_15 is open and there is something in the c_15] The ingredients fridge contains [a list of things in the c_15]. Something scurries by right in the corner of your eye. Probably nothing.[end if][if c_15 is open and the c_15 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] You can make out an ingreditents showcase. [if there is something on the s_14]On the ingreditents showcase you can see [a list of things on the s_14].[end if][if there is nothing on the s_14]But the thing is empty, unfortunately. It would have been so cool if there was stuff on the ingreditents showcase.[end if] You see an ingredients shelf. [if there is something on the s_3]On the ingredients shelf you see [a list of things on the s_3].[end if][if there is nothing on the s_3]But the thing is empty. It would have been so cool if there was stuff on the ingredients shelf.[end if]\n\nYou need an exit without a door? You should try going north.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "hardware", "noun": null, "adj": null, "desc": "You arrive in a hardware. A standard kind of place.\n\n You make out a hardware shelf. The hardware shelf is wooden.[if there is something on the s_5] On the hardware shelf you make out [a list of things on the s_5].[end if][if there is nothing on the s_5] But oh no! there's nothing on this piece of junk.[end if]\n\nYou need an exit without a door? You should try going north.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "restaurant", "noun": null, "adj": null, "desc": "Well, here we are in the restaurant.\n\n Oh wow! Is that what I think it is? It is! It's a tips box. You shudder, but continue examining the room.[if c_7 is open and there is something in the c_7] The tips box contains [a list of things in the c_7]. Make a note of this, you might have to put stuff on or in it later on.[end if][if c_7 is open and the c_7 contains nothing] What a letdown! The tips box is empty![end if] Oh, great. Here's a toilet. The toilet is white.[if there is something on the s_11] On the toilet you can see [a list of things on the s_11]. Huh, weird.[end if][if there is nothing on the s_11] Unfortunately, there isn't a thing on it. Hm. Oh well[end if] You see a restaurant chair. [if there is something on the s_4]On the restaurant chair you make out [a list of things on the s_4].[end if][if there is nothing on the s_4]But the thing is empty, unfortunately.[end if] You can make out a sofa. [if there is something on the s_7]On the sofa you make out [a list of things on the s_7]. You can't wait to tell the folks at home about this![end if][if there is nothing on the s_7]But oh no! there's nothing on this piece of junk. Aw, here you were, all excited for there to be things on it![end if] You see a gleam over in a corner, where you can see a restaurant table. The restaurant table is stylish.[if there is something on the s_8] On the restaurant table you can make out [a list of things on the s_8].[end if][if there is nothing on the s_8] But oh no! there's nothing on this piece of trash.[end if] You scan the room, seeing a BBQ.[if toaster_0 is open and there is something in the toaster_0] The BBQ contains [a list of things in the toaster_0].[end if][if toaster_0 is open and the toaster_0 contains nothing] The BBQ is empty! What a waste of a day![end if]\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] screen door leading north.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_2", {"id": "d_2", "type": "d", "name": "screen door", "noun": null, "adj": null, "desc": "It is what it is, a [noun]. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["d_0", {"id": "d_0", "type": "d", "name": "sliding patio door", "noun": null, "adj": null, "desc": "It's a towering [noun] [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to crack open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["d_1", {"id": "d_1", "type": "d", "name": "sliding glass door", "noun": null, "adj": null, "desc": "It's an imposing [noun] [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to break open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "basket", "noun": "basket", "adj": "woven", "desc": "The [noun] looks ominous. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "fridge", "noun": "fridge", "adj": "conventional", "desc": "The [noun] looks stuffy. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to crack open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_10", {"id": "c_10", "type": "c", "name": "red fruit basket", "noun": "red fruit basket", "adj": "woven", "desc": "The [noun] looks durable. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to force open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_11", {"id": "c_11", "type": "c", "name": "veg fridge", "noun": "veg fridge", "adj": "conventional", "desc": "The [noun] looks sturdy. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to force open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_12", {"id": "c_12", "type": "c", "name": "fruit basket", "noun": "fruit basket", "adj": "woven", "desc": "The [noun] looks well-built. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to force open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_13", {"id": "c_13", "type": "c", "name": "green fruit basket", "noun": "green fruit basket", "adj": "woven", "desc": "The [noun] looks grand. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_14", {"id": "c_14", "type": "c", "name": "meats fridge", "noun": "meats fridge", "adj": "conventional", "desc": "The [noun] looks hefty. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to bash open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_15", {"id": "c_15", "type": "c", "name": "ingredients fridge", "noun": "ingredients fridge", "adj": "conventional", "desc": "The [noun] looks sturdy. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to break open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "red veg basket", "noun": "red veg basket", "adj": "woven", "desc": "The [noun] looks robust. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "green veg basket", "noun": "green veg basket", "adj": "woven", "desc": "The [noun] looks durable. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "yellow basket", "noun": "yellow basket", "adj": "woven", "desc": "The [noun] looks ominous. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to break open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "donation box", "noun": "donation box", "adj": "transparent", "desc": "The [noun] looks towering. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_6", {"id": "c_6", "type": "c", "name": "orange basket", "noun": "orange basket", "adj": "woven", "desc": "The [noun] looks commanding. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to force open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_7", {"id": "c_7", "type": "c", "name": "tips box", "noun": "tips box", "adj": "transparent", "desc": "The [noun] looks grand. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to crack open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["c_8", {"id": "c_8", "type": "c", "name": "fruits fridge", "noun": "fruits fridge", "adj": "conventional", "desc": "The [noun] looks hefty. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to force open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_9", {"id": "c_9", "type": "c", "name": "veg basket", "noun": "veg basket", "adj": "woven", "desc": "The [noun] looks noble. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "counter", "noun": "counter", "adj": "high-tech", "desc": "The [noun] is unstable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "shelf", "noun": "shelf", "adj": "wooden", "desc": "The [noun] is solid.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_10", {"id": "s_10", "type": "s", "name": "stationery shelf", "noun": "stationery shelf", "adj": "wooden", "desc": "The [noun] is an unstable piece of garbage.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_11", {"id": "s_11", "type": "s", "name": "toilet", "noun": "toilet", "adj": "white", "desc": "The [noun] is an unstable piece of trash.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_12", {"id": "s_12", "type": "s", "name": "hygiene showcase", "noun": "hygiene showcase", "adj": "metallic", "desc": "The [noun] is balanced.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_13", {"id": "s_13", "type": "s", "name": "hygiene shelf", "noun": "hygiene shelf", "adj": "wooden", "desc": "The [noun] is solid.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_14", {"id": "s_14", "type": "s", "name": "ingreditents showcase", "noun": "ingreditents showcase", "adj": "metallic", "desc": "The [noun] is an unstable piece of junk.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "showcase", "noun": "showcase", "adj": "metallic", "desc": "The [noun] is shaky.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "ingredients shelf", "noun": "ingredients shelf", "adj": "wooden", "desc": "The [noun] is wobbly.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_4", {"id": "s_4", "type": "s", "name": "restaurant chair", "noun": "restaurant chair", "adj": "stylish", "desc": "The [noun] is shaky.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_5", {"id": "s_5", "type": "s", "name": "hardware shelf", "noun": "hardware shelf", "adj": "wooden", "desc": "The [noun] is stable.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_6", {"id": "s_6", "type": "s", "name": "meats showcase", "noun": "meats showcase", "adj": "metallic", "desc": "The [noun] is solidly built.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_7", {"id": "s_7", "type": "s", "name": "sofa", "noun": "sofa", "adj": "comfy", "desc": "The [noun] is balanced.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_8", {"id": "s_8", "type": "s", "name": "restaurant table", "noun": "restaurant table", "adj": "stylish", "desc": "The [noun] is wobbly.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_9", {"id": "s_9", "type": "s", "name": "clothing showcase", "noun": "clothing showcase", "adj": "metallic", "desc": "The [noun] is wobbly.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["toaster_0", {"id": "toaster_0", "type": "toaster", "name": "BBQ", "noun": "BBQ", "adj": "recent", "desc": "Useful for grilling things.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "salt", "noun": "salt", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "pork bacon", "noun": "pork bacon", "adj": "", "desc": "The [noun] looks tasty.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_2", {"id": "f_2", "type": "f", "name": "pork chop", "noun": "pork chop", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["meal_0", {"id": "meal_0", "type": "meal", "name": "items", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["ingredient_0", {"id": "ingredient_0", "type": "ingredient", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["RECIPE", {"id": "RECIPE", "type": "RECIPE", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["ingredient_1", {"id": "ingredient_1", "type": "ingredient", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "shopping list", "noun": "shopping list", "adj": "interesting", "desc": "You examine the shopping list and start reading:\n\nShopping list #1\n---------\nGather all following items and follow the directions to enjoy a wonderful and hassle-free day of shopping.\n\nItems:\npork bacon\nsalt\n\nDirections:\nGather all above items and enjoy!\n", "room_type": "work", "definite": null, "indefinite": null, "synonyms": ["list"]}]], "KB": {"logic": "# cloth\ntype l : o {\n    predicates {            \n        worn(l);\n\t    takenoff(l);\n        clean(l);\n\t    dirty(l);\n    \t}\n\n    rules {\n        wear/l    :: in(l, I) & takenoff(l) -> worn(l);\n        takeoff/l :: worn(l) -> in(l, I) & takenoff(l);\n\n        wash/l    :: $at(l,r) & dirty(l) -> clean(l);\n        dirty/l   :: $worn(l,P) & clean(l) -> dirty(l);\n    \t}\n\n    reverse_rules {\n        wear/l :: takeoff/l;\n        wash/l :: dirty/l;\n    \t}\n\n    constraints {\n        l1 :: clean(l) & dirty(l) -> fail();\n        l2 :: worn(l) & takenoff(l) -> fail();\n    \t}\n\n    inform7 {\n        type {\n            kind :: \"cloth-like\";\n            definition :: \"cloth-like are wearable. cloth-like can be either clean or dirty. cloth-like are usually clean. cloth-like can be either worn in or worn out. cloth-like are usually worn out.\";                                          \n        }\n\n        predicates {\n            worn(l)    :: \"The {l} is worn in\";\n\t        takenoff(l) :: \"The {l} is worn out\";            \n            clean(l)    :: \"The {l} is clean\";\n\t        dirty(l)    :: \"The {l} is dirty\";            \n        }\n\n        commands {\n            wear/l :: \"wear {l}\" :: \"_wearing the {l}\";\n            takeoff/l :: \"take off {l}\" :: \"taking off the {l}\";\n\n            clean/l :: \"clean {l}\" :: \"cleaning the {l}\";\n\t        dirty/l :: \"dirty {l}\" :: \"dirtying the {l}\";\n        }\n\n        code :: \"\"\"\n            Understand the command \"wear\" as something new. \n            Understand \"wear [something]\" as _wearing. \n            _wearing is an action applying to a thing.  \n\n            Carry out _wearing: \n                if a cloth-like (called cl) is worn out:                     \n                    Now the cl is worn in;                                                                       \n                otherwise:\n                    Say \"You have this cloth on.\". \n        \"\"\";\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr2 :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        consumed(f);\n        edible(f);\n        inedible(f);\n\n        needs_cooking(f);\n        raw(f);\n        cooked(f);\n        burned(f);\n\n        roasted(f);\n        fried(f);\n        grilled(f);\n        # boiled(f);\n        # steamed(f);\n\n        uncut(f);\n        chopped(f);\n        sliced(f);\n        diced(f);\n    }\n\n    rules {\n        eat :: in(f, I) & edible(f) -> consumed(f);\n        drink :: in(f, I) & drinkable(f) -> consumed(f);\n        slice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> sliced(f);\n        dice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> diced(f);\n        chop :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> chopped(f);\n    }\n\n    constraints {\n        consumed1 :: consumed(f) & in(f, I) -> fail();\n        consumed2 :: consumed(f) & in(f, c) -> fail();\n        consumed3 :: consumed(f) & on(f, s) -> fail();\n        consumed4 :: consumed(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is usually edible. food is cookable. food has a type of cooking. food has a type of cutting. food can be cooked. food can be burned. food can be consumed. food is usually not consumed. food is usually cuttable.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            inedible(f) :: \"The {f} is inedible\";\n            consumed(f) :: \"The {f} is consumed\";\n\n            needs_cooking(f) :: \"The {f} is needs cooking\";\n\n            raw(f) :: \"The {f} is raw\";\n            cooked(f) :: \"The {f} is cooked\";\n            burned(f) :: \"The {f} is burned\";\n            fried(f) :: \"The {f} is fried\";\n            grilled(f) :: \"The {f} is grilled\";\n            roasted(f) :: \"The {f} is roasted\";\n\n            uncut(f) :: \"The {f} is uncut\";\n            sliced(f) :: \"The {f} is sliced\";\n            chopped(f) :: \"The {f} is chopped\";\n            diced(f) :: \"The {f} is diced\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n            drink :: \"drink {f}\" :: \"drinking the {f}\";\n            slice :: \"slice {f} with {o}\" :: \"slicing the {f} with the {o}\";\n            dice  :: \"dice {f} with {o}\"  :: \"dicing the {f} with the {o}\";\n            chop  :: \"chop {f} with {o}\"  :: \"chopping the {f} with the {o}\";\n        }\n\n        code :: \"\"\"\n            [Drinking liquid]\n            Drinking carried thing is an action applying to one carried thing.\n            The block drinking rule is not listed in any rulebook.\n            Understand nothing as drinking.\n            Understand \"drink [something]\" as drinking carried thing.\n\n            After drinking carried thing:\n                Now the noun is consumed;\n                Continue the action.\n\n            Check an actor drinking carried thing (this is the can\u2019t drink unless drinkable rule):\n                if the noun is not a thing or the noun is not drinkable:\n                    say \"You cannot drink [the noun].\";\n                    rule fails;\n\n            Carry out an actor drinking carried thing (this is the drinking rule):\n                remove the noun from play.\n\n            Report an actor drinking carried thing (this is the report drinking rule):\n                if the actor is the player:\n                    say \"You drink [the noun]. Not bad.\";\n                otherwise:\n                    say \"[The person asked] just drunk [the noun].\".\n\n            [Eating food]\n            After eating a food (called target):\n                Now the target is consumed;\n                Continue the action.\n\n            Check eating inedible food (called target):\n                if target is needs cooking:\n                    say \"You should cook [the target] first.\";\n                    rule fails.\n\n            [Understanding things by their properties - http://inform7.com/learn/man/WI_17_15.html]\n            Understand the type of cutting property as describing food.\n            Understand the type of cooking property as describing food.\n\n            [Processing food]\n            Understand the commands  \"slice\", \"prune\" as something new.\n            The block cutting rule is not listed in any rulebook.\n            Dicing it with is an action applying to two carried things.\n            Slicing it with is an action applying to two carried things.\n            Chopping it with is an action applying to two carried things.\n\n            Slicing something with something is a cutting activity.\n            Dicing something with something is a cutting activity.\n            Chopping something with something is a cutting activity.\n\n            Does the player mean slicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean chopping something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean dicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Check an actor cutting (this is the generic cut is now allowed rule):\n                say \"You need to specify how you want to cut [the noun]. Either slice, dice, or chop it.\";\n                rule fails.\n\n            Before a cutting activity when the noun is not cuttable:\n                say \"Can only cut cuttable food.\";\n                rule fails.\n\n            Before a cutting activity when the noun is cuttable and the noun is not uncut:\n                say \"[The noun] is already [type of cutting of the noun].\";\n                rule fails.\n\n            Before a cutting activity when the second noun is not sharp:\n                say \"Cutting something requires a knife.\";\n                rule fails.\n\n            Before printing the name of a food (called the food item) which is not uncut while looking, examining, listing contents or taking inventory:\n                say \"[type of cutting of food item] \".\n\n            [Slicing food]\n            Carry out slicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"[The food item] is already [type of cutting of the food item].\";\n                    stop;\n                Now the food item is sliced;\n                say \"You slice the [food item].\".\n\n            Understand \"slice [something] with/using [something]\" as slicing it with.\n\n            [Dicing food]\n            Carry out dicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is diced;\n                say \"You dice the [food item].\".\n\n            Understand \"dice [something] with/using [something]\" as dicing it with.\n\n            [Chopping food]\n            Carry out chopping a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is chopped;\n                say \"You chop the [food item].\".\n\n            Understand the command \"chop\" as something new. [Remove its association with slicing]\n            Understand \"chop [something] with/using [something]\" as chopping it with.\n\n            [Cooking food]\n            Cooking it with is an action applying to one carried thing and one thing.\n\n            Does the player mean cooking something with something carried:\n                it is very unlikely;\n\n            Check cooking something not cookable with something (this is the cook only cookable things rule):\n                say \"Can only cook food.\" instead.\n\n            Check cooking something cookable with something not a source of heat (this is the cooking requires a source of heat rule):\n                say \"Cooking requires a source of heat.\" instead.\n\n            Carry out cooking a carried food (called the food item) with a thing (called a the source of heat):\n                if the food item is cooked:\n                    Now the food item is burned;\n                    Now the food item is not edible;\n                    say \"You burned the [food item]!\";\n                    stop;\n                otherwise:\n                    Now the food item is cooked;\n                if the food item is needs cooking:\n                    Now the food item is edible;\n                    Now the food item is not needs cooking;\n                if the source of heat is a stove-like:\n                    Now the food item is fried;\n                    say \"You fried the [food item].\";\n                else if the source of heat is a oven-like:\n                    Now the food item is roasted;\n                    say \"You roasted the [food item].\";\n                else if the source of heat is a toaster-like:\n                    Now the food item is grilled;\n                    say \"You grilled the [food item].\".\n\n            Understand \"cook [something] with/in/on/using [something]\" as cooking it with.\n\n            Before printing the name of a food (called the food item) while looking, examining, listing contents or taking inventory:\n                if the food item is needs cooking:\n                    say \"raw \";\n                else if the food item is burned:\n                    say \"burned \";\n                else if the food item is not raw:\n                    say \"[type of cooking of food item] \".\n\n        \"\"\";\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: at(o, I) -> at(o, I);\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\ntype ingredient : t {\n    predicates {\n        base(f, ingredient);\n\n        raw(ingredient);\n        roasted(ingredient);\n        fried(ingredient);\n        # cooked(ingredient);\n\n        uncut(ingredient);\n        chopped(ingredient);\n        sliced(ingredient);\n        diced(ingredient);\n    }\n\n    inform7 {\n        predicates {\n            #base(f, ingredient) :: \"When play begins, the base of {ingredient} is {f}\";\n            base(f, ingredient) :: \"The base of {ingredient} is {f}\";\n\n            raw(ingredient) :: \"The {ingredient} is raw\";\n            # cooked(ingredient) :: \"The base of {ingredient} is cooked\";\n            fried(ingredient) :: \"The {ingredient} is fried\";\n            grilled(ingredient) :: \"The {ingredient} is grilled\";\n            roasted(ingredient) :: \"The {ingredient} is roasted\";\n\n            uncut(ingredient) :: \"The {ingredient} is uncut\";\n            sliced(ingredient) :: \"The {ingredient} is sliced\";\n            chopped(ingredient) :: \"The {ingredient} is chopped\";\n            diced(ingredient) :: \"The {ingredient} is diced\";\n        }\n\n        type {\n            kind :: \"ingredient-like\";\n            definition :: \"ingredient-like has a thing called base. ingredient-like has a type of cooking. ingredient-like has a type of cutting.\";\n        }\n    }\n}\n\n# meal\ntype meal : f {\n    inform7 {\n        type {\n            kind :: \"meal-like\";\n        }\n    }\n}\n\ntype RECIPE {\n    predicates {\n        ingredient_1(f);\n        ingredient_2(f);\n        ingredient_3(f);\n        ingredient_4(f);\n        ingredient_5(f);\n        used(f);\n        cooking_location(r, RECIPE);\n        in(ingredient, RECIPE);\n        out(meal, RECIPE);\n        player_in_cooking_location(P, r) = at(P, r) & cooking_location(r, RECIPE);\n    }\n\n    rules {\n        make/recipe/1 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & $out(meal, RECIPE) -> in(meal, I) & edible(meal) & used(f) & raw(meal);\n        make/recipe/2 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & $out(meal, RECIPE) -> in(meal, I) & edible(meal) & used(f) & used(f') & raw(meal);\n        make/recipe/3 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & $out(meal, RECIPE) -> in(meal, I) & edible(meal) & used(f) & used(f') & used(f'') & raw(meal);\n        make/recipe/4 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & in(f''', I) & $ingredient_4(f''') & $out(meal, RECIPE) -> in(meal, I) & edible(meal) & used(f) & used(f') & used(f'') & used(f''') & raw(meal);\n        make/recipe/5 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & in(f''', I) & $ingredient_4(f''') & in(f'''', I) & $ingredient_5(f'''') & $out(meal, RECIPE) -> in(meal, I) & edible(meal) & used(f) & used(f') & used(f'') & used(f''') & used(f'''') & raw(meal);\n    }\n\n    inform7 {\n        predicates {\n            ingredient_1(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_2(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_3(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_4(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_5(f) :: \"\";  # No equivalent in Inform7.\n            cooking_location(r, RECIPE) :: \"The cooking location of the {RECIPE} is the {r}.\";\n            in(ingredient, RECIPE) :: \"When play begins, add {ingredient} to the ingredients of the {RECIPE}\";\n            out(meal, RECIPE) :: \"The meal of the {RECIPE} is the {meal}.\";\n        }\n\n        type {\n            kind :: \"recipe-like\";\n            definition :: \"A recipe-like is a kind of thing. A recipe-like has a list of ingredient-like called ingredients. A recipe-like has a thing called meal. A recipe-like has a room called cooking location.\";\n        }\n\n        commands {\n            make/recipe/1 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/2 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/3 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/4 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/5 :: \"prepare meal\" :: \"preparing meal\";\n        }\n\n        code :: \"\"\"\n            [Ingredient]\n            Rule for printing the name of an ingredient-like (called I):\n                if type of cutting of I is not uncut:\n                    say  \"[type of cutting of I] \";\n                if type of cooking of I is not raw:\n                    say  \"[type of cooking of I] \";\n                say  \"[base of I]\";\n\n            [Preparing a meal]\n            Preparing meal is an action applying to nothing.\n            Before preparing meal:\n                if location is not the cooking location of the recipe:\n                    say \"Can only prepare meal in the [cooking location of the recipe].\";\n                    rule fails;\n                Repeat with ingredient running through the ingredients of the recipe:\n                    let F be the base of the ingredient;\n                    if player does not carry the F:\n                        [say \"The recipe requires [a ingredient].\";]\n                        say \"You still miss something.\";\n                        rule fails;\n                    if type of cooking of F is not type of cooking of ingredient:\n                        [say \"The recipe requires [a ingredient].\";]\n                        say \"Something still needs to be cooked.\";\n                        rule fails;\n                    if type of cutting of F is not type of cutting of ingredient:\n                        [say \"The recipe requires [a ingredient].\";]\n                        say \"Something still needs to be cut.\";\n                        rule fails;\n\n            Carry out preparing meal:\n                say \"Adding the meal to your inventory.\";\n                Repeat with ingredient running through the ingredients of recipe:\n                    now the base of the ingredient is nowhere;\n                now the player carries the meal of the recipe;\n                set pronouns from the meal of the recipe.\n\n            Understand \"prepare meal\" as preparing meal.\n        \"\"\";\n    }\n}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# oven\ntype oven : c {\n    rules {\n        cook/oven/burned :: $at(P, r) & $at(oven, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/oven/cooked/raw :: $at(P, r) & $at(oven, r) & $in(f, I) & raw(f)            -> roasted(f) & cooked(f);\n        cook/oven/cooked/needs_cooking :: $at(P, r) & $at(oven, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> roasted(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"oven-like\";\n            definition :: \"oven-like is a source of heat.\";\n        }\n\n        commands {\n            cook/oven/cooked/raw           :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/cooked/needs_cooking :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/burned               :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n        }\n    }\n}\n\ntype toaster : c {\n    rules {\n        cook/toaster/burned :: $at(P, r) & $at(toaster, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/toaster/cooked/raw :: $at(P, r) & $at(toaster, r) & $in(f, I) & raw(f)            -> grilled(f) & cooked(f);\n        cook/toaster/cooked/needs_cooking :: $at(P, r) & $at(toaster, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> grilled(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"toaster-like\";\n            definition :: \"toaster-like is a source of heat.\";\n        }\n\n        commands {\n            cook/toaster/cooked/raw           :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/cooked/needs_cooking :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/burned               :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n## pot\n#type pot : box {\n#\n#    inform7 {\n#        type {\n#            kind :: \"pot-like\";\n#            definition :: \"pot-like is a kind of box-like.\";\n#        }\n#\n#    }\n#}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(s, r) :: \"The {s} is in {r}\";\n            at(c, r) :: \"The {c} is in {r}\";\n            at(o, r) :: \"The {o} is in {r}\";\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n# stove\ntype stove : s {\n    rules {\n        cook/stove/burned :: $at(P, r) & $at(stove, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/stove/cooked/raw :: $at(P, r) & $at(stove, r) & $in(f, I) & raw(f)            -> fried(f) & cooked(f);\n        cook/stove/cooked/needs_cooking :: $at(P, r) & $at(stove, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> fried(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"stove-like\";\n            definition :: \"stove-like is a source of heat.\";\n        }\n\n        commands {\n            cook/stove/cooked/raw           :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/cooked/needs_cooking :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/burned               :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# text-Like\ntype txt : o {\n    predicates {\n        read/t(txt);\n        unread/t(txt);\n    }\n\n    rules {\n        read/book    :: $at(P, r) & $in(txt, I) & unread/t(txt) -> read/t(txt);\n        examine/book :: at(P, r) & $in(txt, I) -> at(P, r);  # Nothing changes.\n    }\n    \n    reverse_rules {\n        examine/book :: examine/book;\n    }\n    \n    constraints {\n        txt1 :: read/t(txt) & unread/t(txt) -> fail();        \n    }\n\n    inform7 {\n        type {\n            kind :: \"text-like\";\n            definition :: \"A text-like can be either read or unread. A text-like is usually unread.\";\n        }\n\n        predicates {\n            read/t(txt)  :: \"The {txt} is read\";\n            unread/t(txt) :: \"The {txt} is unread\";\n        }\n\n        commands {            \n            read/book     :: \"read the {txt}\"    :: \"_reading the {txt}\";\n            examine/book  :: \"examine {txt}\"  :: \"examining the {txt}\";\n        }\n        \n        code :: \"\"\"\n            Understand the command \"read\" as something new. \n            Understand \"read [something]\" as _reading. \n            _reading is an action applying to a thing. \n        \n            Carry out _reading: \n                if a text-like (called tx) is unread: \n                    Say \"You read the book and realized about that crucial hint.\";\n                    Now the tx is read; \n        \"\"\";\n    }\n}\n\n# thing\ntype t {\n    predicates {\n        sharp(t);\n        cuttable(t);\n        cookable(t);\n        drinkable(t);\n    }\n\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"a thing can be drinkable. a thing is usually not drinkable. a thing can be cookable. a thing is usually not cookable. a thing can be damaged. a thing is usually not damaged. a thing can be sharp. a thing is usually not sharp. a thing can be cuttable. a thing is usually not cuttable. a thing can be a source of heat. Type of cooking is a kind of value. The type of cooking are raw, grilled, roasted and fried. a thing can be needs cooking. Type of cutting is a kind of value. The type of cutting are uncut, sliced, diced and chopped.\";\n        }\n\n        predicates {\n            sharp(t) :: \"The {t} is sharp\";\n            cookable(t) :: \"The {t} is cookable\";\n            cuttable(t) :: \"The {t} is cuttable\";\n            drinkable(t) :: \"The {t} is drinkable\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\ntype object {\n    inform7 {\n        type {\n            kind :: \"object\";\n        }\n    }\n}\n\n", "text_grammars_path": "./TextWorld/textworld/challenges/tw_shopping/textworld_data/text_grammars"}, "metadata": {"seeds": {"map": 5192, "objects": 50057, "quest": 21440, "grammar": 20609}, "goal": "You examine the shopping list and start reading:\n\nShopping list #1\n---------\nGather all following items and follow the directions to enjoy a wonderful and hassle-free day of shopping.\n\nItems:\npork bacon\nsalt\n\nDirections:\nGather all above items and enjoy!\n", "shopping list": "\nShopping list #1\n---------\nGather all following items and follow the directions to enjoy a wonderful and hassle-free day of shopping.\n\nItems:\npork bacon\nsalt\n\nDirections:\nGather all above items and enjoy!\n", "items": [["pork bacon", "raw", "uncut"], ["salt", "raw", "uncut"]], "settings": {"third_party": "./TextWorld/textworld/challenges/tw_shopping/shopping.py", "subcommand": "tw-shopping", "list": 2, "take": 2, "go": 10, "open": false, "drop": false, "list_seed": 1, "split": "train", "output": "./handCraft/", "seed": 1, "format": "ulx", "overview": true, "save_overview": true, "force": false, "silent": false, "verbose": false}, "entities": ["items", "checkout", "vegetables", "fruits", "clothing", "meats", "ingredients", "stationery", "hardware", "hygiene", "restaurant", "sliding patio door", "sliding glass door", "screen door", "basket", "counter", "fridge", "shelf", "showcase", "ingredients shelf", "restaurant chair", "hardware shelf", "red veg basket", "meats showcase", "green veg basket", "yellow basket", "donation box", "sofa", "orange basket", "tips box", "restaurant table", "clothing showcase", "fruits fridge", "stationery shelf", "veg basket", "red fruit basket", "toilet", "veg fridge", "hygiene showcase", "BBQ", "fruit basket", "hygiene shelf", "ingreditents showcase", "green fruit basket", "meats fridge", "ingredients fridge", "shopping list", "salt", "pork bacon", "pork chop"], "nb_distractors": 0, "walkthrough": ["go north", "go north", "examine shopping list", "take pork bacon from fridge", "go south", "go south", "take salt from ingredients shelf"], "max_score": 2, "uuid": "tw-shopping-train-list2+take2+go10-ekDZtbGXIbO5FKp8"}, "objective": "You are eager to shop! Let's get you sorted to quench your desire. Check the shopping list in the checkout for the items needed and directions. Once done, enjoy your items!"}